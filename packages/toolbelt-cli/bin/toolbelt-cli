#! /usr/bin/env node

const fs = require('fs')
const path = require('path')
const chalk = require('chalk')
const webpack = require('webpack')
const browserSync = require('browser-sync')
const webpackDevMiddleware = require('webpack-dev-middleware')
const merge = require('deepmerge')
const pkgJson = require('../package.json')
const hasBabelrc = fs.existsSync(pathFromCwdTo('.babelrc'))

const bold = chalk.bold
const success = chalk.green
const error = chalk.bold.red

const argv = require('yargs')
  .usage('Usage: $0')
  .version(pkgJson.version)
  .alias('v', 'version')
  .alias('h', 'help')
  .config('config', 'toolbelt setting file(JSON)', configPath => {
    return { commands: JSON.parse(fs.readFileSync(configPath, 'utf-8')) }
  })
  .alias('c', 'config')
  .default('config', './.toolbeltrc')
  .command(
    'dev',
    'For develoment, toolbelt watches and builds files.'
  )
  .command(
    'build',
    'For production, toolbelt builds files.'
  )
  .demandCommand()
  .argv

/**
 * 0. Set `NODE_ENV` value according to argv.command.
 */
const cmd = argv._[0] || 'dev' // no command means `dev`
const configrc = argv.commands[cmd]
switch (cmd) {
  case 'build':
    process.env.NODE_ENV = 'production'
    break
  case 'dev':
  default:
    process.env.NODE_ENV = 'development'
    break
}
// process exit, if configrc has no command
if (configrc === undefined) {
  console.log(error(`.configrc doesn't have \`${cmd}\` command`))
  process.exit(1)
}

/**
 * 1. Extend `configrc` with specific config(env, hasBabelrc...)
 */
const options = Object.assign(configrc, {
  hasBabelrc,
  env: process.env.NODE_ENV || 'develpment'
})

// show settings in console.
console.log(bold('TOOLBELT SETTINGS:'))
for (const key in options) {
  console.log(`    ${bold(key)}: ${success(JSON.stringify(options[key]))}`)
}

/**
 * 2. Import webpack config from `configrc`
 * and merge base config with `options`
 */
const mergedConfig = configrc.webpack.map((file, i) => {
  try {
    const config = require(pathFromCwdTo(file))
    return config(options)
  } catch (e) {
    console.error(error(e))
    process.exit(1)
  }
})


/**
 * 3. Webpack compile with merged config.
 * If has bsconfig, browserSync serves with webpack middleware
 * and webpack-files are served on memory.
 * If has no bscofing, webpack compiler writes file on disk.
 */
const compiler = webpack(mergedConfig)

if (cmd === 'dev') {
  if (!configrc.browserSync) {
    let lastHash = null
    compiler.watch(true, (err, stats) => {
      if (err) {
        console.error(error(err))
        process.exit(1)
      }
      if (stats.hash !== lastHash) {
        lastHash = stats.hash
        console.log(stats.toString({colors: true}))
      }
    })
  } else {
    compiler.plugin('done', stats =>{
      if (stats.hasErrors() || stats.hasWarnings())
        process.exit(1)
      browserSync.reload()
    })
    const bsconfigFile = pathFromCwdTo(configrc.browserSync)
    const bsconfig = require(bsconfigFile)
    const mergedBsconfig = merge(
      bsconfig,
      {
        middleware: [
          webpackDevMiddleware(compiler, {
            publicPath: bsconfig.serverStatic,
            stats: {colors: true}
          })
        ]
      },
      {
        arrayMerge: (dist, src) => {
          return dist.concat(src)
        }
      }
    )
    browserSync(mergedBsconfig)
  }
}

if (cmd === 'build') {
  compiler.run((err, stats) => {
    if (err) {
      console.error(error(err))
      process.exit(1)
    }
    console.log(stats.toString({colors: true}))
  })
}

/**
 * relative file path to absolute file path from cwd
 * 
 * @param {String} file
 */
function pathFromCwdTo (file) {
  return path.join(process.cwd(), file)
}
